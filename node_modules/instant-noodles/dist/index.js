var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  InstantNoodles: () => InstantNoodles,
  configureSpecSuite: () => configureSpecSuite,
  updateConfig: () => import_react_microwave2.updateConfig
});
module.exports = __toCommonJS(src_exports);
var import_react_microwave2 = require("react-microwave");

// src/utils/convert.ts
function msToString(ms) {
  if (!isFinite(ms))
    return "-";
  if (ms === 0)
    return "0";
  if (ms < 1e3)
    return ms.toFixed(0) + "ms";
  const seconds = ms / 1e3;
  if (seconds < 60)
    return seconds.toFixed(1) + "s";
  const minutes = seconds / 60;
  if (minutes < 60)
    return minutes.toFixed(1) + "m";
  const hours = minutes / 60;
  if (hours < 24)
    return hours.toFixed(1) + "h";
  const days = hours / 24;
  return days.toFixed(1) + "d";
}

// src/utils/misc.ts
var noop = () => {
};

// src/utils/parse-utils.ts
var parse_utils_exports = {};
__export(parse_utils_exports, {
  isDefined: () => isDefined,
  isNil: () => isNil,
  isNull: () => isNull,
  isObject: () => isObject,
  isString: () => isString,
  isUndefined: () => isUndefined,
  isValid: () => isValid,
  keysOf: () => keysOf,
  parseJSON: () => parseJSON,
  valuesOf: () => valuesOf
});
function isString(value) {
  return typeof value === "string";
}
function isUndefined(value) {
  return typeof value === "undefined";
}
function isNull(value) {
  return value === null;
}
function isNil(value) {
  return isNull(value) || isUndefined(value);
}
function isValid(value) {
  return !isNil(value);
}
function isDefined(value) {
  return isValid(value);
}
function isObject(value) {
  return Object.prototype.toString.call(value) === "[object Object]";
}
function keysOf(obj) {
  return Object.keys(obj);
}
function valuesOf(obj) {
  return Object.values(obj);
}
function parseJSON(value) {
  try {
    return isUndefined(value) ? void 0 : JSON.parse(value ?? "");
  } catch {
    console.log("parsing error on", { value });
    return void 0;
  }
}

// src/utils/styles.ts
function classNames(...classes) {
  if (Array.isArray(classes[0])) {
    classes = classes[0];
  }
  return classes.filter(Boolean).join(" ");
}

// src/components/Button/ButtonTypes.tsx
var buttonVariantToClassNamesMapping = {
  standard: {
    button: "bg-white border-black",
    externalBorder: "bg-black",
    content: "text-black"
  },
  blue: {
    button: "bg-blue-300 border-black",
    externalBorder: "bg-black",
    content: "text-white"
  },
  yellow: {
    button: "bg-yellow-300 border-black",
    externalBorder: "bg-black",
    content: "text-black"
  },
  pink: {
    button: "bg-pink-200 border-black",
    externalBorder: "bg-black",
    content: "text-black"
  },
  green: {
    button: "bg-green-300 border-black",
    externalBorder: "bg-black",
    content: "text-black"
  },
  red: {
    button: "bg-red-300 border-black",
    externalBorder: "bg-black",
    content: "text-danger"
  },
  info: {
    button: "bg-blue-200 border-black",
    externalBorder: "bg-black",
    content: "text-neutral-600"
  },
  success: {
    button: "bg-green-200 border-black",
    externalBorder: "bg-black",
    content: "text-success"
  },
  warning: {
    button: "bg-yellow-200 border-black",
    externalBorder: "bg-black",
    content: "text-warning"
  },
  danger: {
    button: "bg-red-200 border-black",
    externalBorder: "bg-black",
    content: "text-danger"
  },
  dark: {
    button: "bg-black border-neutral-500",
    externalBorder: "bg-black",
    content: "text-white"
  },
  ghost: {
    button: "bg-white border-none",
    externalBorder: "transparent",
    content: "text-black"
  }
};
var BUTTON_VARIANT = keysOf(buttonVariantToClassNamesMapping);
var buttonSizeToClassNamesMapping = {
  sm: {
    button: "px-3 py-2",
    content: "text-sm"
  },
  md: {
    button: "px-4 py-2",
    content: "text-md"
  },
  lg: {
    button: "px-6 py-3",
    content: "text-lg"
  },
  xl: {
    button: "px-12 py-4",
    content: "text-3xl"
  }
};
var BUTTON_SIZE = keysOf(buttonSizeToClassNamesMapping);

// src/components/Button/Button.tsx
var React3 = __toESM(require("react"));

// src/components/Button/ButtonContent.tsx
var React2 = __toESM(require("react"));

// src/components/Button/Spinner.tsx
var React = __toESM(require("react"));
var spinnerSizeToClassNamesMapping = {
  sm: {
    container: "w-5 h-5 min-w-5 max-w-5 min-h-5 max-h-5",
    indicator: "before:border-2 after:border-2"
  },
  md: {
    container: "w-10 h-10 min-w-10 max-w-10 min-h-10 max-h-10",
    indicator: "before:border-4 after:border-4"
  },
  lg: {
    container: "w-16 h-16 min-w-16 max-w-16 min-h-16 max-h-16",
    indicator: "before:border-8 after:border-8"
  },
  xl: {
    container: "w-28 h-28 min-w-28 max-w-28 min-h-28 max-h-28",
    indicator: "before:border-14 after:border-14"
  }
};
var SPINNER_SIZE = keysOf(spinnerSizeToClassNamesMapping);
var spinnerVariantToClassNameMapping = {
  red: "before:border-t-red-300 after:border-t-red-300",
  blue: "before:border-t-blue-300 after:border-t-blue-300",
  green: "before:border-t-green-300 after:border-t-green-300",
  pink: "before:border-t-pink-300 after:border-t-pink-300",
  yellow: "before:border-t-yellow-300 after:border-t-yellow-300",
  plain: "before:border-t-white after:border-t-white",
  dark: "before:border-t-black after:border-t-black"
};
var SPINNER_VARIANT = keysOf(spinnerVariantToClassNameMapping);
function Spinner({
  size = "sm",
  variant = "plain",
  rotateColors = false,
  className = "",
  ...props
}) {
  const rotateColorRef = React.useRef(null);
  const [spinnerVariant, setSpinnerVariant] = React.useState(variant);
  const sizeStyles = spinnerSizeToClassNamesMapping[size];
  const variantStyles = spinnerVariantToClassNameMapping[spinnerVariant];
  React.useEffect(() => {
    if (rotateColors) {
      rotateColorRef.current = setInterval(() => {
        setSpinnerVariant((currentSpinnerVariant) => {
          const idx = SPINNER_VARIANT.indexOf(currentSpinnerVariant);
          const newIdx = idx === SPINNER_VARIANT.length - 1 ? 0 : idx + 1;
          return SPINNER_VARIANT[newIdx];
        });
      }, 1e3);
    }
    return () => {
      if (rotateColors && isDefined(rotateColorRef?.current)) {
        clearInterval(rotateColorRef.current);
      }
    };
  }, []);
  const wrapperClassNames = classNames([
    "instant-noodles-ui-element instant-noodles-ui-spinner",
    "inline-flex",
    "rounded-full shrink-0",
    "relative ml-0",
    sizeStyles.container,
    className
  ]);
  return /* @__PURE__ */ React.createElement("div", {
    className: wrapperClassNames,
    ...props
  }, /* @__PURE__ */ React.createElement("div", {
    className: classNames([
      "before:z-30",
      "before:animate-spin",
      "before:w-full after:w-full",
      "before:h-full after:h-full",
      "before:rounded-full after:rounded-full",
      "before:absolute after:absolute",
      "before:border-transparent after:border-neutral-300",
      sizeStyles.indicator,
      variantStyles,
      "challenges-ui-spin-funky",
      "after:border-t-neutral-300"
    ])
  }));
}

// src/components/Button/ButtonContent.tsx
var ButtonIcon = ({ buttonVariant, buttonSize, isLoading = false, icon, className = "" }) => {
  if (!icon && !isLoading)
    return null;
  return /* @__PURE__ */ React2.createElement("span", null, isLoading ? /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Spinner, {
    variant: ["standard", "ghost"].includes(buttonVariant) ? "blue" : "plain",
    size: buttonSize === "xl" ? "md" : "sm",
    className: classNames([buttonSize !== "xl" ? "translate-y-0.5" : "translate-y-1", className])
  })) : icon);
};
var ButtonContent = React2.forwardRef(({
  children,
  textProps,
  buttonVariant,
  buttonSize = "md",
  isLoading = false,
  iconLeft = null,
  iconRight = null,
  className = "",
  ...props
}, ref) => {
  return /* @__PURE__ */ React2.createElement("span", {
    className: classNames([
      "instant-noodles-ui-element instant-noodles-ui-button-content",
      "flex flex-row items-center space-x-2 justify-center",
      className
    ]),
    ref,
    ...props
  }, /* @__PURE__ */ React2.createElement(ButtonIcon, {
    buttonVariant,
    buttonSize,
    isLoading,
    icon: iconLeft,
    className: "mr-2"
  }), /* @__PURE__ */ React2.createElement("span", {
    ...textProps
  }, children), /* @__PURE__ */ React2.createElement(ButtonIcon, {
    buttonVariant,
    buttonSize,
    icon: iconRight,
    className: "ml-2"
  }));
});
ButtonContent.displayName = "ButtonContent";
var ButtonContent_default = ButtonContent;

// src/components/Button/Button.tsx
var Button = React3.forwardRef(({
  disabled = false,
  variant = "standard",
  size = "md",
  circle = false,
  square = false,
  block = false,
  isLoading = false,
  asComponent = "button",
  onClick = noop,
  iconLeft = null,
  iconRight = null,
  className = "",
  children,
  ...props
}, ref) => {
  const variantClasses = buttonVariantToClassNamesMapping[variant];
  const sizeClasses = buttonSizeToClassNamesMapping[size];
  const handleOnClick = (e) => {
    if (disabled)
      return;
    if (isLoading)
      return;
    onClick(e);
  };
  const borderRadiusClassname = circle ? "rounded-full" : square ? "" : "rounded-xl";
  const buttonClassNames = classNames([
    "instant-noodles-ui-element instant-noodles-ui-button",
    "relative",
    variant === "ghost" ? "" : "border-2",
    block ? "w-full" : "",
    asComponent === "button" ? "" : "inline-block",
    borderRadiusClassname,
    variant === "ghost" ? "" : "shadow-full",
    "challenge-ui-animated-button",
    "duration-200",
    variant === "ghost" || disabled || isLoading ? "" : "active:translate-y-px active:shadow-fourth",
    disabled ? "cursor-not-allowed" : isLoading ? "cursor-wait" : "cursor-pointer",
    sizeClasses.button,
    variantClasses.button,
    className
  ]);
  const buttonContentClassNames = classNames([
    "flex flex-row items-center",
    "whitespace-nowrap",
    "font-extrabold",
    sizeClasses.content,
    variantClasses.content
  ]);
  return React3.createElement(asComponent, {
    className: buttonClassNames,
    onClick: handleOnClick,
    disabled,
    ref,
    ...props
  }, /* @__PURE__ */ React3.createElement(ButtonContent_default, {
    buttonVariant: variant,
    buttonSize: size,
    isLoading,
    iconLeft,
    iconRight,
    className: buttonContentClassNames
  }, /* @__PURE__ */ React3.createElement(React3.Fragment, null, children)));
});
Button.displayName = "Button";
var Button_default = Button;

// src/components/Expandable/Expandable.tsx
var React5 = __toESM(require("react"));

// src/components/Icons/index.tsx
var React4 = __toESM(require("react"));
var downArrow = () => {
  return /* @__PURE__ */ React4.createElement("svg", {
    "aria-hidden": "true",
    height: "16",
    viewBox: "0 0 16 16",
    version: "1.1",
    width: "16",
    className: "octicon color-fg-muted"
  }, /* @__PURE__ */ React4.createElement("path", {
    fillRule: "evenodd",
    d: "M12.78 6.22a.75.75 0 010 1.06l-4.25 4.25a.75.75 0 01-1.06 0L3.22 7.28a.75.75 0 011.06-1.06L8 9.94l3.72-3.72a.75.75 0 011.06 0z"
  }));
};
var rightArrow = () => {
  return /* @__PURE__ */ React4.createElement("svg", {
    "aria-hidden": "true",
    height: "16",
    viewBox: "0 0 16 16",
    version: "1.1",
    width: "16",
    "data-view-component": "true",
    className: "octicon color-fg-muted"
  }, /* @__PURE__ */ React4.createElement("path", {
    fillRule: "evenodd",
    d: "M6.22 3.22a.75.75 0 011.06 0l4.25 4.25a.75.75 0 010 1.06l-4.25 4.25a.75.75 0 01-1.06-1.06L9.94 8 6.22 4.28a.75.75 0 010-1.06z"
  }));
};
var warning = () => {
  return /* @__PURE__ */ React4.createElement("svg", {
    "aria-hidden": "true",
    height: "16",
    viewBox: "0 0 16 16",
    version: "1.1",
    width: "16",
    "data-view-component": "true",
    className: "octicon color-text-warning"
  }, /* @__PURE__ */ React4.createElement("path", {
    fillRule: "evenodd",
    d: "M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z"
  }));
};
var cross = () => {
  return /* @__PURE__ */ React4.createElement("svg", {
    className: "octicon color-text-danger",
    viewBox: "0 0 16 16",
    version: "1.1",
    width: "16",
    height: "16",
    "aria-hidden": "true"
  }, /* @__PURE__ */ React4.createElement("path", {
    fillRule: "evenodd",
    d: "M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z"
  }));
};
var check = () => {
  return /* @__PURE__ */ React4.createElement("svg", {
    "aria-hidden": "true",
    height: "16",
    viewBox: "0 0 16 16",
    version: "1.1",
    width: "16",
    "data-view-component": "true",
    className: "octicon color-icon-success"
  }, /* @__PURE__ */ React4.createElement("path", {
    fillRule: "evenodd",
    d: "M13.78 4.22a.75.75 0 010 1.06l-7.25 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a.75.75 0 011.06 0z"
  }));
};
var blank = () => {
  return /* @__PURE__ */ React4.createElement("svg", {
    className: "octicon",
    viewBox: "0 0 16 16",
    version: "1.1",
    width: "16",
    height: "16",
    "aria-hidden": "true"
  });
};
var getIcon = (status) => {
  switch (status) {
    case "failed":
      return cross();
    case "passed":
      return check();
    case "timedOut":
      return warning();
    case "skipped":
      return blank();
  }
};
function statusIcon(status) {
  return /* @__PURE__ */ React4.createElement(React4.Fragment, null, /* @__PURE__ */ React4.createElement(React4.Fragment, null, getIcon(status)));
}

// src/components/Expandable/Expandable.tsx
var Expandable = ({ header, expanded, setExpanded, children, noInsets }) => {
  return /* @__PURE__ */ React5.createElement("div", {
    className: "expandable"
  }, /* @__PURE__ */ React5.createElement("div", {
    className: `expandable-header ${setExpanded ? `expanded-${expanded}` : ""}`,
    onClick: () => setExpanded?.(!expanded),
    title: typeof header === "string" ? header : void 0
  }, setExpanded && !!expanded && downArrow(), setExpanded && !expanded && rightArrow(), header), (!setExpanded || expanded) && /* @__PURE__ */ React5.createElement("div", {
    className: "expandable-body" + (noInsets ? " expandable-body-no-insets" : "")
  }, children));
};

// src/components/InstantNoodles/InstantNoodles.tsx
var React18 = __toESM(require("react"));
var ReactDOM2 = __toESM(require("react-dom"));

// src/components/ReportDisplay/ReportContent.tsx
var React12 = __toESM(require("react"));

// src/components/Suite/Suite.tsx
var React7 = __toESM(require("react"));

// src/components/Suite/helpers.tsx
var React6 = __toESM(require("react"));
function getValidHtmlStringForErrorMessage(e) {
  let lastIndex = -1;
  lastIndex = e.indexOf("(Actual)");
  if (lastIndex > -1) {
    return e.slice(0, lastIndex + 8);
  }
  lastIndex = e.indexOf("(ok)");
  if (lastIndex > -1) {
    return e.slice(0, lastIndex + 4);
  }
  lastIndex = e.indexOf("at assert");
  if (lastIndex > -1) {
    return e.slice(0, lastIndex + 9);
  }
  return e;
}
var htmlFormatStatus = (status) => {
  if (status === "passed")
    return /* @__PURE__ */ React6.createElement("span", {
      style: { fontWeight: "bold", color: "var(--color-scale-green-4)" }
    }, status);
  if (status === "failed")
    return /* @__PURE__ */ React6.createElement("span", {
      style: { fontWeight: "bold", color: "var(--color-scale-red-5)" }
    }, status);
  if (status === "skipped")
    return /* @__PURE__ */ React6.createElement("span", {
      style: { fontWeight: "bold", color: "var(--color-scale-gray-4)" }
    }, status);
  return status;
};
var stripExtraneousValuesFromErrorString = (e) => e.replace("[90m", "").replace("[39m", "");
var createHtmlFromError = (e) => {
  const eLines = stripExtraneousValuesFromErrorString(e).split("\n");
  const formattedELines = eLines.filter((l) => Boolean(l?.trim()) && Boolean(l.trim())).map((l) => `<p style="display: flex">${l}</p>`).join("");
  const htmlToRender = getValidHtmlStringForErrorMessage(formattedELines);
  return htmlToRender;
};

// src/components/Suite/Suite.tsx
var TestSuite = ({ suite: suite2, isTestExpanded, setExpandedTests, displayFilter }) => {
  const [expandedSuiteTests, setExpandedSuiteTests] = React7.useState(/* @__PURE__ */ new Map());
  const filteredSuiteTests = React7.useMemo(() => {
    if (!displayFilter || displayFilter === "all")
      return suite2.tests;
    return suite2.tests.filter((test) => test.status === displayFilter);
  }, [displayFilter]);
  return /* @__PURE__ */ React7.createElement(Expandable, {
    expanded: isTestExpanded(suite2.suiteName),
    noInsets: true,
    setExpanded: (expanded) => setExpandedTests(suite2.suiteName, expanded),
    header: /* @__PURE__ */ React7.createElement("span", null, /* @__PURE__ */ React7.createElement("span", {
      style: { float: "right", marginLeft: 5 }
    }, msToString(suite2.stats.duration)), suite2.suiteName)
  }, filteredSuiteTests.length === 0 ? /* @__PURE__ */ React7.createElement("div", {
    className: "test-case"
  }, /* @__PURE__ */ React7.createElement("span", {
    className: "test-case-desc"
  }, "No tests match that filter for this suite")) : null, filteredSuiteTests.map((test) => /* @__PURE__ */ React7.createElement(React7.Fragment, {
    key: `test-${test.order}`
  }, /* @__PURE__ */ React7.createElement("div", {
    className: "test-case test-case-outcome-" + test.status,
    role: "button",
    onClick: () => {
      const isExpanded = expandedSuiteTests.get(test.order);
      const newExpanded = new Map(expandedSuiteTests);
      newExpanded.set(test.order, !isExpanded);
      setExpandedSuiteTests(newExpanded);
    }
  }, /* @__PURE__ */ React7.createElement("span", {
    style: { float: "right" }
  }, msToString(test.duration)), statusIcon(test.status), /* @__PURE__ */ React7.createElement("span", {
    className: "test-case-desc"
  }, "\u2014 ", test.description)), expandedSuiteTests.get(test.order) ? /* @__PURE__ */ React7.createElement(React7.Fragment, null, test.errors?.length ? /* @__PURE__ */ React7.createElement("div", {
    className: "error-message-box-wrapper"
  }, test.errors.map((e, i) => {
    const htmlToRender = createHtmlFromError(e);
    return /* @__PURE__ */ React7.createElement("div", {
      key: `error-${i}`,
      className: "error-message-box",
      dangerouslySetInnerHTML: { __html: htmlToRender }
    });
  })) : /* @__PURE__ */ React7.createElement("div", {
    className: "success-message-box-wrapper"
  }, /* @__PURE__ */ React7.createElement("div", null, test.description), /* @__PURE__ */ React7.createElement("div", null, "Status: ", htmlFormatStatus(test.status)))) : null)));
};

// src/components/Suite/SuiteResults.tsx
var React9 = __toESM(require("react"));

// src/components/Loader/Loader.tsx
var React8 = __toESM(require("react"));
function Loader(props) {
  return /* @__PURE__ */ React8.createElement(React8.Fragment, null, /* @__PURE__ */ React8.createElement("div", {
    id: "loading-overlay",
    className: "regular-loading",
    ...props
  }, /* @__PURE__ */ React8.createElement("div", {
    className: "loader"
  }, /* @__PURE__ */ React8.createElement("span", {
    className: "bar"
  }), /* @__PURE__ */ React8.createElement("span", {
    className: "bar"
  }), /* @__PURE__ */ React8.createElement("span", {
    className: "bar"
  }))));
}

// src/components/Suite/SuiteResults.tsx
var SuiteResults = ({
  report,
  expandedTests,
  setExpandedTests,
  displayFilter,
  defaultExpanded = true,
  testsAreRunning
}) => {
  const filteredSuites = React9.useMemo(() => {
    const result = [];
    let visibleTests = 0;
    for (const suite2 of report?.suites || []) {
      const tests = suite2.tests;
      visibleTests += tests.length;
      if (tests.length)
        result.push({ suite: suite2, defaultExpanded: visibleTests < 200 });
    }
    return result;
  }, [report]);
  if (testsAreRunning) {
    return /* @__PURE__ */ React9.createElement("div", {
      className: "suites"
    }, /* @__PURE__ */ React9.createElement(Loader, null));
  }
  return /* @__PURE__ */ React9.createElement("div", {
    className: "suites"
  }, report?.suites ? filteredSuites.map(({ suite: suite2 }) => {
    return /* @__PURE__ */ React9.createElement(TestSuite, {
      key: `suite-${suite2.suiteName}`,
      displayFilter,
      report,
      suite: suite2,
      isTestExpanded: (fileId) => {
        const value = expandedTests.get(fileId);
        if (value === void 0)
          return defaultExpanded;
        return !!value;
      },
      setExpandedTests: (fileId, expanded) => {
        const newExpanded = new Map(expandedTests);
        newExpanded.set(fileId, expanded);
        setExpandedTests(newExpanded);
      }
    });
  }) : null);
};

// src/components/ReportDisplay/ReportHeader.tsx
var React10 = __toESM(require("react"));
var navbarFilterItems = [
  { label: "All", value: "all", stateAttr: "total" },
  { label: "Passed", value: "passed", stateAttr: "passed", icon: statusIcon("passed") },
  { label: "Failed", value: "failed", stateAttr: "failed", icon: statusIcon("failed") },
  { label: "Skipped", value: "skipped", stateAttr: "skipped" }
];
function ReportHeader({ stats, setDisplayFilter, displayFilter }) {
  return /* @__PURE__ */ React10.createElement("nav", {
    className: "report-navbar"
  }, navbarFilterItems.map((item) => /* @__PURE__ */ React10.createElement(React10.Fragment, {
    key: item.value
  }, /* @__PURE__ */ React10.createElement(Button_default, {
    className: `nav-item ${item.value === displayFilter ? "active" : ""}`,
    onClick: () => setDisplayFilter(item.value)
  }, item.icon ?? null, " ", item.label, " ", /* @__PURE__ */ React10.createElement("span", {
    className: "counter"
  }, stats?.[item.stateAttr] ?? 0)))));
}

// src/components/ReportDisplay/ToggleReportButton.tsx
var React11 = __toESM(require("react"));
function ToggleReportButton({ setIsShowing, numPassed, numTotal, ...props }) {
  const borderColor = numPassed === numTotal ? "green" : "red";
  return /* @__PURE__ */ React11.createElement("button", {
    className: "react-live-test-report-toggle",
    style: {
      display: "flex",
      flexDirection: "column",
      height: 45,
      width: 45,
      alignItems: "center",
      justifyContent: "center",
      background: "white",
      border: `solid 1px ${borderColor}`,
      borderRadius: "50%",
      position: "absolute",
      right: 5,
      top: 5,
      cursor: "pointer",
      fontSize: 12,
      fontWeight: "bold"
    },
    onClick: () => setIsShowing?.(true),
    ...props
  }, /* @__PURE__ */ React11.createElement("span", {
    style: { display: "flex", justifyContent: "center", fontWeight: "bold" }
  }, numPassed ?? 0, "/", numTotal ?? 0));
}

// src/hooks/use-event-listener.tsx
var import_react2 = require("react");

// src/hooks/use-isomorphic-layout-effect.tsx
var import_react = require("react");
var useIsomorphicLayoutEffect = typeof window !== "undefined" ? import_react.useLayoutEffect : import_react.useEffect;

// src/hooks/use-event-listener.tsx
function useEventListener(eventName, handler, element) {
  const savedHandler = (0, import_react2.useRef)(handler);
  useIsomorphicLayoutEffect(() => {
    savedHandler.current = handler;
  }, [handler]);
  (0, import_react2.useEffect)(() => {
    const targetElement = element?.current || window;
    if (!(targetElement && targetElement.addEventListener))
      return;
    const eventListener = (event) => savedHandler.current(event);
    targetElement.addEventListener(eventName, eventListener);
    return () => {
      targetElement.removeEventListener(eventName, eventListener);
    };
  }, [eventName, element]);
}

// src/hooks/use-on-click-outside.tsx
function useOnClickOutside(ref, handler, mouseEvent = "mousedown") {
  useEventListener(mouseEvent, (event) => {
    const el = ref?.current;
    if (!el || el.contains(event.target)) {
      return;
    }
    handler(event);
  });
}

// src/components/ReportDisplay/ReportContent.tsx
function ReportContent(props) {
  const reportWrapperRef = React12.useRef(null);
  const handleOnClickOutside = () => {
    props.setIsShowing(false);
  };
  useOnClickOutside(reportWrapperRef, handleOnClickOutside);
  if (!props.isShowing) {
    return /* @__PURE__ */ React12.createElement(ToggleReportButton, {
      numPassed: props.report?.stats?.passed ?? 0,
      numTotal: props.report?.stats?.total ?? 0,
      setIsShowing: props.setIsShowing
    });
  }
  return /* @__PURE__ */ React12.createElement("div", {
    className: "htmlreport",
    ref: reportWrapperRef
  }, /* @__PURE__ */ React12.createElement("div", {
    className: "report-close-icon",
    role: "button",
    onClick: () => props.setIsShowing(!props.isShowing)
  }, cross()), /* @__PURE__ */ React12.createElement("main", null, /* @__PURE__ */ React12.createElement(ReportHeader, {
    stats: props.stats,
    displayFilter: props.displayFilter,
    setDisplayFilter: props.setDisplayFilter
  }), /* @__PURE__ */ React12.createElement("br", null), /* @__PURE__ */ React12.createElement("br", null), /* @__PURE__ */ React12.createElement(SuiteResults, {
    displayFilter: props.displayFilter,
    report: props.report,
    expandedTests: props.expandedTests,
    setExpandedTests: props.setExpandedTests,
    testsAreRunning: props.testsAreRunning
  })));
}

// src/components/ReportDisplay/ReportDisplay.tsx
var React16 = __toESM(require("react"));

// src/components/ReportFrame/ReportFrame.tsx
var React15 = __toESM(require("react"));
var ReactDOM = __toESM(require("react-dom"));
var import_server = require("react-dom/server");

// src/components/ReportFrame/Content.tsx
var React13 = __toESM(require("react"));
function Content({ children, onMount = noop, onUpdate = noop }) {
  React13.useEffect(() => {
    onMount();
  }, []);
  React13.useEffect(() => {
    onUpdate();
  }, [children]);
  return /* @__PURE__ */ React13.createElement(React13.Fragment, null, React13.Children.only(children));
}

// src/components/ReportFrame/createHead.tsx
function rootStyles() {
  return `
<style>

:root {
  --color-canvas-subtle: #161b22;
  --color-border-default: #30363d;

  --color-fg-default: #c9d1d9;
  --color-fg-muted: #8b949e;
  --color-fg-subtle: #484f58;  

  --color-checks-step-header-open-bg: #161b22;
  --color-checks-step-error-text: #f85149;
  --color-checks-step-warning-text: #d29922;  

  --color-neutral-emphasis-plus: #6e7681;
  --color-neutral-emphasis: #6e7681;
  --color-neutral-muted: rgba(110,118,129,0.4);
  --color-neutral-subtle: rgba(110,118,129,0.1);

  --color-accent-fg: #58a6ff;
  --color-accent-emphasis: #1f6feb;
  --color-accent-muted: rgba(56,139,253,0.4);
  --color-accent-subtle: rgba(56,139,253,0.15);

  --color-success-fg: #3fb950;
  --color-success-emphasis: #238636;
  --color-success-muted: rgba(46,160,67,0.4);
  --color-success-subtle: rgba(46,160,67,0.15);

  --color-attention-fg: #d29922;
  --color-attention-emphasis: #9e6a03;
  --color-attention-muted: rgba(187,128,9,0.4);
  --color-attention-subtle: rgba(187,128,9,0.15);

  --color-severe-fg: #db6d28;
  --color-severe-emphasis: #bd561d;
  --color-severe-muted: rgba(219,109,40,0.4);
  --color-severe-subtle: rgba(219,109,40,0.15);

  --color-danger-fg: #f85149;
  --color-danger-emphasis: #da3633;
  --color-danger-muted: rgba(248,81,73,0.4);
  --color-danger-subtle: rgba(248,81,73,0.15);

  --color-done-fg: #a371f7;
  --color-done-emphasis: #8957e5;
  --color-done-muted: rgba(163,113,247,0.4);
  --color-done-subtle: rgba(163,113,247,0.15);  

  --color-scale-black: #010409;
  --color-scale-white: #f0f6fc;

  --color-scale-gray-0: #f0f6fc;
  --color-scale-gray-1: #c9d1d9;
  --color-scale-gray-2: #b1bac4;
  --color-scale-gray-3: #8b949e;
  --color-scale-gray-4: #6e7681;
  --color-scale-gray-5: #484f58;
  --color-scale-gray-6: #30363d;
  --color-scale-gray-7: #21262d;
  --color-scale-gray-8: #161b22;
  --color-scale-gray-9: #0d1117;  
}
</style>  
  `;
}
function reportGlobalStyles() {
  return `
<style>
* {
  box-sizing: border-box;
  min-width: 0;
  min-height: 0;
  font-family: "SF Mono", Monaco, Consolas, "Droid Sans Mono", Inconsolata, "Courier New", monospace;
  font-size: 13px;
}

html, body {
  width: 100%;
  height: 100%;
  padding: 0;
  margin: 0;
  overscroll-behavior-x: none;
}

body {
  overflow: auto;
  max-width: 1024px;
  margin: 0 auto;
  width: 100%;
}

#react-live-test-small-font {
  font-size: 10px;
}

svg {
  fill: currentColor;
}

.mr-1 { margin-right: 4px; }
.mr-2 { margin-right: 8px; }
.mr-3 { margin-right: 16px; }
.mr-4 { margin-right: 24px; }
.mr-5 { margin-right: 32px; }

.ml-1 { margin-left: 4px; }
.ml-2 { margin-left: 8px; }
.ml-3 { margin-left: 16px; }
.ml-4 { margin-left: 24px; }
.ml-5 { margin-left: 32px; }

.p-1 { padding: 4px; }
.p-2 { padding: 8px; }
.p-3 { padding: 16px; }
.p-4 { padding: 24px; }
.p-5 { padding: 32px; }

.px-1 { padding: 0 4px; }
.px-2 { padding: 0 8px; }
.px-3 { padding: 0 16px; }
.px-4 { padding: 0 24px; }
.px-5 { padding: 0 32px; }

.py-1 { padding: 4px 0; }
.py-2 { padding: 8px 0; }
.py-3 { padding: 16px 0; }
.py-4 { padding: 24px 0; }
.py-5 { padding: 32px 0; }

.float-left {
  float: left !important;
}

article, aside, details, figcaption, figure, footer, header, main, menu, nav, section {
  display: block;
}

html,
body,
h1,
h2,
h3,
h4,
h5,
h6,
span,
p,
div {
  margin: 0;
  padding: 0;
}  

</style>
  `;
}
function iconStyles() {
  return `
<style>
.color-icon-success {
  color: var(--color-success-fg) !important;
}

.color-text-danger {
  color: var(--color-danger-fg) !important;
}

.color-text-warning {
  color: var(--color-checks-step-warning-text) !important;
}

.color-fg-muted {
  color: var(--color-fg-muted) !important;
}

.octicon {
  display: inline-block;
  overflow: visible !important;
  vertical-align: text-bottom;
  fill: currentColor;
  margin-right: 7px;
  flex: none;
}
</style>  
  `;
}
function reportNavbarStyles() {
  return `
<style>

.report-navbar {
  display: flex;
  whitespace: nowrap;
}

.nav-item {
  flex: none;
  position: relative;
  float: left;
  padding: 5px 10px;
  font-weight: 500;
  line-height: 20px;
  color: var(--color-fg-default);
  color: var(--color-fg-subtle);
  color: var(--color-fg-muted);
  border: 1px solid var(--color-border-default);
  cursor: pointer;
  background-color: rgb(249, 249, 249);
}

.nav-item:hover, 
.nav-item.active {
  background-color: var(--color-canvas-subtle);
  color: white;
}

.nav-item:first-child {
  border-top-left-radius: 6px;
  border-bottom-left-radius: 6px;
}

.nav-item:last-child {
  border-top-right-radius: 6px;
  border-bottom-right-radius: 6px;
}

.nav-item + .subnav-item {
  margin-left: -1px;
}

.counter {
  display: inline-block;
  min-width: 20px;
  padding: 0 6px;
  font-size: 12px;
  font-weight: 500;
  line-height: 18px;
  color: var(--color-fg-default);
  color: white;
  text-align: center;
  background-color: var(--color-neutral-muted);
  border: 1px solid transparent;
  border-radius: 2em;
}

.nav-item:hover .counter, 
.nav-item.active .counter {
  color: var(--color-fg-default);
  background-color: var(--color-neutral-muted);  
}


@media only screen and (max-width: 600px) {
  .nav-item {
    border-radius: 0 !important;
  }

  .nav-item {
    padding: 5px 3px;
    border: none;
  }
}  

</style>
  `;
}
function expandableStyles() {
  return `

<style>
.expandable { 
  background: white;
}

.expandable-header {
  border: 1px solid var(--color-border-default);
  border-top-left-radius: 6px;
  border-top-right-radius: 6px;
  background-color: var(--color-canvas-subtle);
  padding: 0 8px;
  border-bottom: none;
  margin-top: 24px;
  font-weight: 600;
  line-height: 38px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  color: white;
}

.expandable-header.expanded-false {
  border: 1px solid var(--color-border-default);
  border-radius: 6px;
}

.expandable-header.expanded-false,
.expandable-header.expanded-true {
  cursor: pointer;
}

.expandable-body {
  border: 1px solid var(--color-border-default);
  border-bottom-left-radius: 6px;
  border-bottom-right-radius: 6px;
  padding: 16px;
}

.expandable-body-no-insets {
  padding: 0;
}

@media only screen and (max-width: 600px) {
  .expandable-header {
    border-radius: 0;
    border-right: none;
    border-left: none;
  }

  .expandable-body {
    border-radius: 0;
    border-right: none;
    border-left: none;
    padding: 8px;
  }

  .expandable-body-no-insets {
    padding: 0; 
  }
}

</style>    
  `;
}
function testResultStyles() {
  return `

<style>

.test-case {
  height: 38px;
  line-height: 38px;
  align-items: center;
  padding: 0 10px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  cursor: pointer;
}

.test-case:hover {
  background-color: var(--color-canvas-subtle);
  color: white;
}

.test-case-desc {
  padding: 0 0 0 8px;
  color: var(--color-fg-muted);
}

.test-case-outcome-skipped {
  color: var(--color-fg-muted);
}

.test-case:not(:first-child) {
  border-top: 1px solid var(--color-border-default);
}

</style>  
  `;
}
function errorMessageBoxStyles() {
  return `
<style>
.success-message-box-wrapper {
  border-top: solid 1px rgba(222, 222, 222, 0.9);
  padding: 8px;  
}

.error-message-box-wrapper {
  border-top: solid 1px rgba(222, 222, 222, 0.9);
  padding: 4px 0;
}
.error-message-box {
  padding: 4px 8px;
  display: flex; 
  flex-direction: column;
  gap: 0.75rem;
  max-width: 100%;
}
.error-message-box .title {
  font-weight: bold;
  text-transform: uppercase;
}  
.error-message-box .italic {
  font-style: italic;
}    
.error-message-box .underline {
  text-decoration: underline;
}      
.error-message-box .dim {
  color: var(--color-scale-gray-2);
}
.error-message-box .error-text.test-name {
  text-decoration: red wavy underline;
}
.error-message-box .error-text.suite-name {
  font-weight: bold;
}
</style>  
  `;
}
function reportStyles() {
  return `

<style>
.htmlreport {
  position: relative;
  background: white;
  background: rgb(248, 249, 253);
  height: 100%;
  height: 100vh;
  overflow-y: scroll;
  border-left: solid 1px #cecece;
  padding-bottom: 1rem;
  padding: 1.5rem;
  display: flex;
  flex-direction: column;
  flex: auto;
}
.htmlreport .report-close-icon {
  position: absolute;
  top: 5px;
  right: 5px;
  cursor: pointer;
}
span.html-colored-formatter {
  /* word-wrap: break-word; */
  overflow-wrap: break-word;
}
span.pretty {
  word-break: break-word;
}
.suites {
  padding-bottom: 1rem;
}
@media only screen and (max-width: 600px) {
  .report {
    padding: 0 !important;
  }
}  
</style>
  `;
}
function loaderStyles() {
  return `

<style>
.regular-loading .loader {
  margin: auto;
  width: 60px;
  height: 50px;
  font-size: 10px;
  top: calc(50% - 25px);
  position: relative;
}

.regular-loading .loader>span {
  height: 100%;
  width: 5px;
  display: block;
  float: left;
  margin: 0 7.5px;
  margin-bottom: 0.6em;
  animation: loader-animation-red 1.2s infinite ease-in-out;
}

.regular-loading .loader span:nth-child(2) {
  animation-delay: -1s;
}

.regular-loading .loader span:nth-child(3) {
  animation-delay: -0.8s;
}

@keyframes loader-animation-red {

  0%,
  20% {
      background-color: #999999;
      transform: scaleY(0.6);
      -webkit-transform: scaleY(0.6);
  }

  50% {
      background-color: #cc0000;
      transform: scaleY(1.5);
      -webkit-transform: scaleY(1.5);
  }

  100% {
      background-color: #999999;
      transform: scaleY(0.6);
      -webkit-transform: scaleY(0.6);
  }
}
</style>    
  `;
}
function createHead() {
  return `
<head>

${rootStyles()}

${reportGlobalStyles()}

${iconStyles()}

${reportNavbarStyles()}

${expandableStyles()}

${testResultStyles()}

${errorMessageBoxStyles()}

${reportStyles()}

${loaderStyles()}

</head>
  `;
}

// src/components/ReportFrame/Context.tsx
var React14 = __toESM(require("react"));
var doc;
var win;
if (typeof document !== "undefined") {
  doc = document;
}
if (typeof window !== "undefined") {
  win = window;
}
var FrameContext = React14.createContext({ document: doc, window: win, initialized: 0 });
var { Provider: FrameContextProvider, Consumer: FrameContextConsumer } = FrameContext;

// src/components/ReportFrame/ReportFrame.tsx
function ReportFrame(props) {
  const { frameRef } = props;
  const setNodeRef = (node) => {
    if (isDefined(node) && !isDefined(frameRef.current)) {
      frameRef.current = node;
      props.onMount?.();
    }
  };
  const getDoc = () => {
    if (isDefined(frameRef.current)) {
      return frameRef.current.contentDocument;
    }
    return null;
  };
  const createFrameContents = () => {
    if (!isDefined(frameRef.current))
      return null;
    const doc2 = getDoc();
    if (!isDefined(doc2))
      return null;
    const win2 = doc2.defaultView;
    const contents2 = /* @__PURE__ */ React15.createElement(Content, {
      onUpdate: props.onUpdate,
      onMount: props.onMount
    }, /* @__PURE__ */ React15.createElement(FrameContextProvider, {
      value: { document: doc2, window: win2 ?? void 0, initialized: props.initialized ?? 0 }
    }, props?.children ?? null));
    return contents2;
  };
  const getMountTarget = () => {
    const doc2 = getDoc();
    let target;
    if (isDefined(props?.mountTarget)) {
      target = doc2?.querySelector(props?.mountTarget);
    }
    if (isDefined(doc2) && !isDefined(target)) {
      target = doc2?.body?.children?.[0];
    }
    if (isDefined(frameRef?.current) && !isDefined(target)) {
      const frameDoc = frameRef?.current?.contentDocument;
      const body = frameRef?.current?.contentDocument?.body;
      if (!body?.children?.length) {
        target = frameDoc?.createElement("main");
        if (target) {
          target?.setAttribute("id", "instant-noodles-react-live-test-frame-root");
          body?.appendChild(target);
        }
      }
      target = frameRef?.current?.contentDocument?.body?.children?.[0];
    }
    return target;
  };
  const createIFrameProps = (contents2, target) => {
    const iframeprops = {
      srcDoc: createDefaultSrcWithBody(createHead()),
      className: "sandbox-iframe-element" + isDefined(contents2) ? "" : "" + isDefined(target) ? "" : ""
    };
    return iframeprops;
  };
  const d = getDoc();
  const contents = createFrameContents();
  const contentsMountTarget = getMountTarget();
  const frameProps = createIFrameProps(contents, contentsMountTarget);
  const iframeStyle = getIframeStyle(props.isShowing);
  return /* @__PURE__ */ React15.createElement(React15.Fragment, null, /* @__PURE__ */ React15.createElement("iframe", {
    ...frameProps,
    ref: setNodeRef,
    style: iframeStyle
  }, isDefined(d) && isDefined(contentsMountTarget) ? ReactDOM.createPortal(contents, contentsMountTarget) : null));
}
var getIframeStyle = (isShowing = false) => {
  const defaultStyles = {
    right: 0,
    top: 0,
    bottom: 0,
    height: "100%",
    width: "100%",
    position: "fixed",
    display: "flex",
    flexDirection: "column",
    zIndex: 1e12,
    border: "none"
  };
  const styles = isShowing ? {
    ...defaultStyles,
    height: "100vh",
    width: "800px",
    maxWidth: "100vw",
    transform: "translateX(0)",
    overflowY: "scroll"
  } : {
    ...defaultStyles,
    height: 50,
    width: 50,
    alignItems: "center",
    justifyContent: "center"
  };
  return styles;
};
function StaticButton() {
  return /* @__PURE__ */ React15.createElement("button", {
    className: "react-live-test-report-toggle",
    style: {
      display: "flex",
      flexDirection: "column",
      height: 45,
      width: 45,
      alignItems: "center",
      justifyContent: "center",
      background: "white",
      border: `solid 1px ${"green"}`,
      borderRadius: "50%",
      position: "absolute",
      right: 5,
      top: 5,
      cursor: "pointer",
      fontSize: 10,
      letterSpacing: "0.1px",
      fontWeight: "bold"
    }
  }, /* @__PURE__ */ React15.createElement("span", {
    id: "react-live-test-small-font",
    style: { display: "flex", justifyContent: "center", fontWeight: "bold" }
  }, "save to run"));
}
var createDefaultSrcWithBody = (head = "<head></head>", body = `<main id="instant-noodles-react-live-test-frame-root" style="overflow-y: scroll">${(0, import_server.renderToStaticMarkup)(StaticButton())}</main>`) => `<!DOCTYPE html><html>${head}<body>${body}</body></html>`;

// src/hooks/use-local-storage.tsx
var import_react3 = require("react");
function useLocalStorage(key, initialValue) {
  const readValue = (0, import_react3.useCallback)(() => {
    if (typeof window === "undefined") {
      return initialValue;
    }
    try {
      const item = window.localStorage.getItem(key);
      return item ? parseJSON(item) : initialValue;
    } catch (error) {
      console.warn(`Error reading localStorage key \u201C${key}\u201D:`, error);
      return initialValue;
    }
  }, [initialValue, key]);
  const [storedValue, setStoredValue] = (0, import_react3.useState)(readValue());
  const setValueRef = (0, import_react3.useRef)();
  setValueRef.current = (value) => {
    if (typeof window == "undefined") {
      console.warn(`Tried setting localStorage key \u201C${key}\u201D even though environment is not a client`);
    }
    try {
      const newValue = value instanceof Function ? value(storedValue) : value;
      window.localStorage.setItem(key, JSON.stringify(newValue));
      setStoredValue(newValue);
    } catch (error) {
      console.warn(`Error setting localStorage key \u201C${key}\u201D:`, error);
    }
  };
  const setValue = (0, import_react3.useCallback)((value) => setValueRef.current?.(value), []);
  (0, import_react3.useEffect)(() => {
    setStoredValue(readValue());
  }, []);
  const handleStorageChange = (0, import_react3.useCallback)(() => {
    setStoredValue(readValue());
  }, [readValue]);
  useEventListener("storage", handleStorageChange);
  return [storedValue, setValue];
}

// src/components/ReportDisplay/ReportDisplay.tsx
function useReportDisplay() {
  const frameRef = React16.useRef(null);
  const [isShowing, setIsShowing] = useLocalStorage("microwave-report-is-showing", false);
  const [displayFilter, setDisplayFilter] = React16.useState("all");
  const [expandedTests, setExpandedTests] = React16.useState(/* @__PURE__ */ new Map());
  return {
    frameRef,
    isShowing,
    setIsShowing,
    displayFilter,
    setDisplayFilter,
    expandedTests,
    setExpandedTests
  };
}
function ReportDisplay(props) {
  const {
    frameRef,
    isShowing,
    setIsShowing,
    displayFilter,
    setDisplayFilter,
    expandedTests,
    setExpandedTests
  } = useReportDisplay();
  return /* @__PURE__ */ React16.createElement(ReportFrame, {
    frameRef,
    initialized: props.initialized ? 1 : 0,
    passing: props.report?.stats?.passed ?? 0,
    total: props.report?.stats?.total ?? 0,
    isShowing,
    setIsShowing
  }, /* @__PURE__ */ React16.createElement(ReportContent, {
    report: props.report,
    stats: props.report?.stats,
    displayFilter,
    setDisplayFilter,
    expandedTests,
    setExpandedTests,
    setIsShowing,
    isShowing,
    testsAreRunning: props.testsAreRunning
  }));
}

// src/hooks/use-execute-test-suites.tsx
var React17 = __toESM(require("react"));
var microwave = __toESM(require("react-microwave"));

// src/hooks/use-debounced-callback.tsx
var import_react4 = require("react");
function useDebouncedCallback(func, wait, options) {
  const lastCallTime = (0, import_react4.useRef)(null);
  const lastInvokeTime = (0, import_react4.useRef)(0);
  const timerId = (0, import_react4.useRef)(null);
  const lastArgs = (0, import_react4.useRef)([]);
  const lastThis = (0, import_react4.useRef)();
  const result = (0, import_react4.useRef)();
  const funcRef = (0, import_react4.useRef)(func);
  const mounted = (0, import_react4.useRef)(true);
  funcRef.current = func;
  const useRAF = !wait && wait !== 0 && typeof window !== "undefined";
  if (typeof func !== "function") {
    throw new TypeError("Expected a function");
  }
  wait = +wait || 0;
  options = options || {};
  const leading = !!options.leading;
  const trailing = "trailing" in options ? !!options.trailing : true;
  const maxing = "maxWait" in options;
  const maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : null;
  (0, import_react4.useEffect)(() => {
    mounted.current = true;
    return () => {
      mounted.current = false;
    };
  }, []);
  const debounced = (0, import_react4.useMemo)(() => {
    const invokeFunc = (time) => {
      const args = lastArgs.current;
      const thisArg = lastThis.current;
      lastArgs.current = lastThis.current = null;
      lastInvokeTime.current = time;
      return result.current = funcRef.current.apply(thisArg, args);
    };
    const startTimer = (pendingFunc, wait2) => {
      if (useRAF)
        cancelAnimationFrame(timerId.current);
      timerId.current = useRAF ? requestAnimationFrame(pendingFunc) : setTimeout(pendingFunc, wait2);
    };
    const shouldInvoke = (time) => {
      if (!mounted.current)
        return false;
      const timeSinceLastCall = time - lastCallTime.current;
      const timeSinceLastInvoke = time - lastInvokeTime.current;
      return !lastCallTime.current || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    };
    const trailingEdge = (time) => {
      timerId.current = null;
      if (trailing && lastArgs.current) {
        return invokeFunc(time);
      }
      lastArgs.current = lastThis.current = null;
      return result.current;
    };
    const timerExpired = () => {
      const time = Date.now();
      if (shouldInvoke(time)) {
        return trailingEdge(time);
      }
      if (!mounted.current) {
        return;
      }
      const timeSinceLastCall = time - lastCallTime.current;
      const timeSinceLastInvoke = time - lastInvokeTime.current;
      const timeWaiting = wait - timeSinceLastCall;
      const remainingWait = maxing ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
      startTimer(timerExpired, remainingWait);
    };
    const func2 = (...args) => {
      const time = Date.now();
      const isInvoking = shouldInvoke(time);
      lastArgs.current = args;
      lastThis.current = this;
      lastCallTime.current = time;
      if (isInvoking) {
        if (!timerId.current && mounted.current) {
          lastInvokeTime.current = lastCallTime.current;
          startTimer(timerExpired, wait);
          return leading ? invokeFunc(lastCallTime.current) : result.current;
        }
        if (maxing) {
          startTimer(timerExpired, wait);
          return invokeFunc(lastCallTime.current);
        }
      }
      if (!timerId.current) {
        startTimer(timerExpired, wait);
      }
      return result.current;
    };
    func2.cancel = () => {
      if (timerId.current) {
        useRAF ? cancelAnimationFrame(timerId.current) : clearTimeout(timerId.current);
      }
      lastInvokeTime.current = 0;
      lastArgs.current = lastCallTime.current = lastThis.current = timerId.current = null;
    };
    func2.isPending = () => {
      return !!timerId.current;
    };
    func2.flush = () => {
      return !timerId.current ? result.current : trailingEdge(Date.now());
    };
    return func2;
  }, [leading, maxing, wait, maxWait, trailing, useRAF]);
  return debounced;
}

// src/hooks/use-execute-test-suites.tsx
var import_meta = {};
var testsRun = 0;
function registerCallbackOnViteHMREvent(cb = () => {
}, config = {}) {
  if (import_meta.hot) {
    if (config?.debug)
      console.log("[REACT-INSTANT-NOODLES]: hot", { data: import_meta.hot?.data });
    import_meta.hot.on("vite:beforeUpdate", (data) => {
      if (config?.debug)
        console.log("[REACT-INSTANT-NOODLES]:VITE HMR Data", { data });
      cb(data);
    });
  }
}
function registerCallbackOnWebackHMREvent(cb = () => {
}, config = {}) {
  if (import_meta.hot) {
    if (config?.debug)
      console.log("[REACT-INSTANT-NOODLES]: hot", { data: import_meta.hot?.data });
    import_meta.hot.on("webpack:beforeUpdate", (data) => {
      if (config?.debug)
        console.log("[REACT-INSTANT-NOODLES]: WEBPACK HMR Data", { data });
      cb(data);
    });
  }
}
function useExecuteCallbackOnHMR(cb = () => {
}, config = {}) {
  const [init, setInit] = React17.useState(false);
  const listener = React17.useRef(null);
  React17.useEffect(() => {
    if (!init) {
      if (config?.debug)
        console.log("[REACT-INSTANT-NOODLES]: HMR callback handler initialized");
      registerCallbackOnViteHMREvent(cb, config);
      registerCallbackOnWebackHMREvent(cb, config);
      listener.current = cb;
      setInit(true);
    }
  });
}
async function executedTestsResults({ testSuites, RootComponent }) {
  if (!RootComponent) {
    console.log(`[REACT-INSTANT-NOODLES]: No RootComponent provided. Skipping test execution.`);
    return null;
  }
  for (const testSuiteName in testSuites) {
    const testSuite = testSuites[testSuiteName];
    const register = testSuite(RootComponent);
    if (!register) {
      console.log(`[REACT-INSTANT-NOODLES]: No suite object returned for ${testSuiteName}. Skipping tests for ${testSuiteName}.`);
      continue;
    }
    register.run();
  }
  const results = await microwave.exec();
  return results.toJson();
}
function useExecuteTestSuites({
  testSuites,
  RootComponent,
  config
}) {
  const [testsAreRunning, setTestsAreRunning] = React17.useState(false);
  const [reportResults, setReportResults] = React17.useState({});
  const timeout = React17.useRef(null);
  const debouncedExecuteTests = useDebouncedCallback(() => {
    const runTests = async () => {
      setTestsAreRunning(true);
      const results = await executedTestsResults({ testSuites, RootComponent });
      setReportResults((s) => ({ ...s, ...results }));
      testsRun++;
      if (config?.debug)
        console.log(`[REACT-INSTANT-NOODLES]: TEST RUNS ${testsRun}`);
      setTestsAreRunning(false);
    };
    runTests();
  }, 50);
  React17.useEffect(() => {
    setTimeout(() => {
      debouncedExecuteTests();
    }, 150);
  }, []);
  useExecuteCallbackOnHMR((data) => {
    if (config?.debug)
      console.log({ message: "[REACT-INSTANT-NOODLES]: Creating timeout to execute tests after HMR", data });
    if (timeout.current) {
      clearTimeout(timeout.current);
    }
    timeout.current = setTimeout(() => {
      if (config?.debug)
        console.log("[REACT-INSTANT-NOODLES]: Running tests after HMR");
      debouncedExecuteTests();
    }, 100);
  }, config);
  return { report: reportResults, testsAreRunning };
}

// src/constants.tsx
var MICROWAVE_LIVE_REPORT_ROOT_DIV_ID = `microwave-report-div-root`;

// src/components/InstantNoodles/InstantNoodles.tsx
function useInstantNoodles({ tests, RootComponent, config }) {
  const container = React18.useRef(null);
  const [initialized, setInitialized] = React18.useState(false);
  const { report, testsAreRunning } = useExecuteTestSuites({
    testSuites: tests,
    RootComponent,
    config
  });
  const reportExists = isDefined(report?.stats);
  React18.useEffect(() => {
    if (!container.current && !initialized) {
      const existingEl = window.document.getElementById(MICROWAVE_LIVE_REPORT_ROOT_DIV_ID);
      if (existingEl) {
        container.current = existingEl;
      } else {
        const el = window.document.createElement("div");
        el.setAttribute("id", MICROWAVE_LIVE_REPORT_ROOT_DIV_ID);
        container.current = el;
        window.document.body.appendChild(el);
      }
      setInitialized(true);
    }
  }, [initialized]);
  return { report, testsAreRunning, container, initialized, reportExists };
}
function InstantNoodles(props) {
  const { report, testsAreRunning, container, initialized, reportExists } = useInstantNoodles({
    tests: props.tests,
    RootComponent: props.RootComponent,
    config: props.config
  });
  return /* @__PURE__ */ React18.createElement(React18.Fragment, null, container.current ? ReactDOM2.createPortal(/* @__PURE__ */ React18.createElement(ReportDisplay, {
    report,
    testsAreRunning,
    initialized
  }), container.current) : null);
}

// src/spec-setup.tsx
var React19 = __toESM(require("react"));
var ReactTestRenderer = __toESM(require("react-test-renderer"));
var import_react5 = require("@testing-library/react");
var import_react_microwave = require("react-microwave");
var htmlDocumentString = `<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>React Challenges</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
  </head>
  <body>
    <main></main>
  </body>
</html>`;
var documentCache = {
  doc: null
};
var createHtmlDocumentShim = (html = htmlDocumentString) => {
  if (!documentCache.doc) {
    documentCache.doc = new window.DOMParser().parseFromString(html, "text/html");
    if (!documentCache.doc?.defaultView) {
      Object.defineProperty(documentCache.doc, "defaultView", {
        value: window
      });
    }
  }
  return documentCache.doc;
};
var createResetFunction = (dummyDocument) => {
  function reset() {
    dummyDocument.title = "";
    dummyDocument.head.innerHTML = `<meta charset="utf-8" />
  <title>React Challenges</title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />`;
    dummyDocument.body.innerHTML = "<main></main>";
  }
  return reset;
};
var createRenderFunction = (dummyDocument) => {
  function render(ui, options = {}) {
    const Wrapper = ({ children }) => /* @__PURE__ */ React19.createElement(React19.Fragment, null, children);
    return (0, import_react5.render)(ui, {
      container: dummyDocument.querySelector("main"),
      wrapper: Wrapper,
      ...options
    });
  }
  return render;
};
function configureMicrowave(dummyDocument) {
  const reset = createResetFunction(dummyDocument);
  const wrappedSuite = (name) => {
    const testSuite = (0, import_react_microwave.suite)(name);
    testSuite.after.each?.(() => {
      reset();
      (0, import_react5.cleanup)();
    });
    return testSuite;
  };
  return {
    assert: import_react_microwave.assert,
    exec: import_react_microwave.exec,
    suite: wrappedSuite,
    updateConfig: import_react_microwave.updateConfig
  };
}
function configureSpecSuite() {
  const dummyDocument = createHtmlDocumentShim();
  const render = createRenderFunction(dummyDocument);
  const microwave2 = configureMicrowave(dummyDocument);
  return {
    render,
    fireEvent: import_react5.fireEvent,
    waitFor: import_react5.waitFor,
    screen: import_react5.screen,
    queries: import_react5.queries,
    within: import_react5.within,
    waitForElementToBeRemoved: import_react5.waitForElementToBeRemoved,
    cleanup: import_react5.cleanup,
    configure: import_react5.configure,
    queryHelpers: import_react5.queryHelpers,
    createEvent: import_react5.createEvent,
    prettyFormat: import_react5.prettyFormat,
    prettyDOM: import_react5.prettyDOM,
    buildQueries: import_react5.buildQueries,
    getSuggestedQuery: import_react5.getSuggestedQuery,
    getConfig: import_react5.getConfig,
    isInaccessible: import_react5.isInaccessible,
    logDOM: import_react5.logDOM,
    logRoles: import_react5.logRoles,
    getElementError: import_react5.getElementError,
    reactTestRenderer: {
      create: ReactTestRenderer.create,
      act: ReactTestRenderer.act
    },
    parseUtils: parse_utils_exports,
    dummyDocument,
    ...microwave2
  };
}
//# sourceMappingURL=index.js.map