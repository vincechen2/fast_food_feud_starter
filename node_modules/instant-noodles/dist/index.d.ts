import * as microwave from 'react-microwave';
import { MicrowaveConfig, assert, IMicrowaveSuite } from 'react-microwave';
export { updateConfig } from 'react-microwave';
import * as React from 'react';
import { ReactElement, JSXElementConstructor, ElementType, CSSProperties } from 'react';
import * as _testing_library_react from '@testing-library/react';
import { RenderOptions, queries, waitFor, waitForElementToBeRemoved, cleanup, configure, queryHelpers, prettyFormat, prettyDOM, getSuggestedQuery, getConfig, isInaccessible, logDOM, logRoles } from '@testing-library/react';
import * as ReactTestRenderer from 'react-test-renderer';

declare type AnyFunction<P extends Parameters<any> = Parameters<any>, R = any> = (...args: P) => R;
declare type RenderUi = ReactElement<any, string | JSXElementConstructor<any>>;
declare type RenderFunc = AnyFunction<[RenderUi, RenderOptions]>;
declare type ConfiguredTestSuite = ReturnType<typeof microwave.suite>;
declare type TestSuiteRunner = (Component: ElementType) => ConfiguredTestSuite;
declare type TestSuiteMapping = Record<string, TestSuiteRunner>;
declare type ReportResults = MicrowaveReportJson;
declare type HTMLReport = MicrowaveReportJson;
declare type TestFileSummary = Record<string, any>;
declare type IReportTimer = {
    startTs: number;
    finishTs: number;
    duration: number;
};
declare type ReportStats = IReportTimer & {
    total: number;
    passed: number;
    failed: number;
    skipped: number;
    ok: boolean;
};
declare type MicrowaveReportJson = {
    suites: ITestSuiteSummary[];
    stats: ReportStats;
    projectName?: string;
};
declare type ITestSuiteSummary = {
    suiteOrder: number;
    suiteName: string;
    tests: ITestCaseSummary[];
    stats: ReportStats;
};
declare type TestCaseResultsStatus = "passed" | "failed" | "skipped" | "pending" | "timedOut";
declare type ITestCaseSummary = IReportTimer & {
    order: number;
    description: string;
    suiteName: string;
    annotations: {
        type: string;
        description?: string;
    }[];
    ok: boolean;
    retry: number;
    errors: string[];
    status: TestCaseResultsStatus;
};
declare type ExpandedTests = Map<string | number, boolean>;
declare type ReportFilter = "all" | TestCaseResultsStatus;
interface CommonProps {
    className?: string;
    style?: CSSProperties;
    "aria-label"?: string;
    "data-testid"?: string;
}
declare type Metadata = Partial<{
    generatedAt: number;
    "revision.id": string;
    "revision.author": string;
    "revision.email": string;
    "revision.subject": string;
    "revision.timestamp": number;
    "revision.link": string;
    "revision.localPendingChanges": boolean;
    "ci.link": string;
}>;

interface InstantNoodlesProps {
    RootComponent?: React.ComponentType<any>;
    tests?: TestSuiteMapping;
    config?: Partial<MicrowaveConfig>;
}
declare function InstantNoodles(props: InstantNoodlesProps): JSX.Element;

declare function isString(value: any): value is string;
declare function isUndefined(value: any): value is undefined;
declare function isNull(value: any): value is null;
declare function isNil(value: any): value is null | undefined;
declare function isValid<T>(value: T | undefined | null): value is T;
declare function isDefined<T>(value: T | undefined | null): value is T;
declare function isObject(value: any): value is object;
declare function keysOf<T extends object, K extends keyof T>(obj: T): K[];
declare function valuesOf<T extends object, K extends keyof T>(obj: T): T[K][];
declare function parseJSON<T>(value: string | null): T | undefined;

declare const parseUtils_isString: typeof isString;
declare const parseUtils_isUndefined: typeof isUndefined;
declare const parseUtils_isNull: typeof isNull;
declare const parseUtils_isNil: typeof isNil;
declare const parseUtils_isValid: typeof isValid;
declare const parseUtils_isDefined: typeof isDefined;
declare const parseUtils_isObject: typeof isObject;
declare const parseUtils_keysOf: typeof keysOf;
declare const parseUtils_valuesOf: typeof valuesOf;
declare const parseUtils_parseJSON: typeof parseJSON;
declare namespace parseUtils {
  export {
    parseUtils_isString as isString,
    parseUtils_isUndefined as isUndefined,
    parseUtils_isNull as isNull,
    parseUtils_isNil as isNil,
    parseUtils_isValid as isValid,
    parseUtils_isDefined as isDefined,
    parseUtils_isObject as isObject,
    parseUtils_keysOf as keysOf,
    parseUtils_valuesOf as valuesOf,
    parseUtils_parseJSON as parseJSON,
  };
}

declare function configureSpecSuite(): {
    assert: typeof assert;
    exec: () => Promise<microwave.IMicrowaveReport>;
    suite: (name: string) => IMicrowaveSuite<microwave.MicrowaveContext>;
    updateConfig: (config: microwave.MicrowaveConfig) => void;
    render: (ui: React.ReactElement<any, string | React.JSXElementConstructor<any>>, options?: {}) => _testing_library_react.RenderResult<typeof queries, HTMLElement, HTMLElement>;
    fireEvent: _testing_library_react.FireFunction & _testing_library_react.FireObject;
    waitFor: typeof waitFor;
    screen: _testing_library_react.Screen<typeof queries>;
    queries: typeof queries;
    within: typeof _testing_library_react.getQueriesForElement;
    waitForElementToBeRemoved: typeof waitForElementToBeRemoved;
    cleanup: typeof cleanup;
    configure: typeof configure;
    queryHelpers: typeof queryHelpers;
    createEvent: _testing_library_react.CreateObject & _testing_library_react.CreateFunction;
    prettyFormat: typeof prettyFormat;
    prettyDOM: typeof prettyDOM;
    buildQueries: typeof queryHelpers.buildQueries;
    getSuggestedQuery: typeof getSuggestedQuery;
    getConfig: typeof getConfig;
    isInaccessible: typeof isInaccessible;
    logDOM: typeof logDOM;
    logRoles: typeof logRoles;
    getElementError: typeof queryHelpers.getElementError;
    reactTestRenderer: {
        create: typeof ReactTestRenderer.create;
        act: typeof ReactTestRenderer.act;
    };
    parseUtils: typeof parseUtils;
    dummyDocument: Document;
};

export { AnyFunction, CommonProps, ConfiguredTestSuite, ExpandedTests, HTMLReport, IReportTimer, ITestCaseSummary, ITestSuiteSummary, InstantNoodles, Metadata, MicrowaveReportJson, RenderFunc, RenderUi, ReportFilter, ReportResults, ReportStats, TestCaseResultsStatus, TestFileSummary, TestSuiteMapping, TestSuiteRunner, configureSpecSuite };
